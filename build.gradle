buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.tngtech.jgiven:jgiven-gradle-plugin:{version}"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.5'
    id 'com.tngtech.jgiven.gradle-plugin' version '2.0.2'
    id 'jacoco'
    id 'pmd'
    id "checkstyle"
    id 'org.openrewrite.rewrite' version '7.6.1'
    id 'org.jetbrains.dokka' version "2.0.0"
}

group = 'com.github.j4c62.pms'
version = '1.0.0'

configurations {
    configureEach {
        exclude group: 'ch.qos.logback'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
}


jacoco {
    toolVersion = "0.8.13"
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(false)
        html.required.set(true)
        csv.required.set(false)
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/grpc/**',
                            '**/*MapperImpl.class',
                            '**/io/envoyproxy/pgv/validate/**',
                            "**/BookingApplicationService.class"
                    ])
                })
        )
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

repositories {
    mavenCentral()
}
configurations {
    otelAgent
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka:4.2.1'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams:4.2.1'

    otelAgent "io.opentelemetry.javaagent:opentelemetry-javaagent:2.16.0"
    implementation("io.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:2.16.0-alpha")

    implementation 'net.devh:grpc-server-spring-boot-starter:3.1.0.RELEASE'
    implementation 'net.devh:grpc-client-spring-boot-starter:3.1.0.RELEASE'
    runtimeOnly 'io.grpc:grpc-netty-shaded:1.72.0'
    implementation 'io.grpc:grpc-protobuf:1.72.0'
    implementation 'io.grpc:grpc-stub:1.71.0'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers:3.3.8'
    testImplementation "org.testcontainers:kafka:1.19.3"
    testImplementation 'io.grpc:grpc-testing:1.72.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'


    testImplementation 'com.tngtech.jgiven:jgiven-junit5:2.0.2'
    testImplementation 'com.tngtech.jgiven:jgiven-spring-junit5:2.0.2'
    testImplementation 'com.tngtech.jgiven:jgiven-html5-report:2.0.2'


    testImplementation 'org.assertj:assertj-core:4.0.0-M1'


    rewrite("org.openrewrite.recipe:rewrite-rewrite:0.6.0")
    implementation 'com.puppycrawl.tools:checkstyle:10.23.1'
    dokkaPlugin("org.jetbrains.dokka:gfm-plugin:2.0.0")

}
tasks.withType(JavaExec).configureEach {
    doFirst {
        def agentJar = configurations.otelAgent.singleFile
        jvmArgs += "-javaagent:${agentJar}"
    }
}
checkstyle {
    toolVersion = '10.23.1'
    configFile = file("config/checkstyle/google_checks.xml")
}
checkstyleMain {
    exclude '**/grpc/**'
    exclude '**/*MapperImpl.class'
    exclude '**/io/envoyproxy/pgv/validate/**'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.72.0'
        }
        javapgv {
            artifact = "build.buf.protoc-gen-validate:protoc-gen-validate:1.2.1"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                option '@generated=omit'
            }
        }
    }
}
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = file("build/docs/javadoc")
    exclude '**/io/envoyproxy/pgv/validate/**'
    options {
        encoding = 'UTF-8'
        windowTitle = 'PMS Booking Service - Javadoc Document'
    }
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
    jvmArgs("-Xshare:off")
    jvmArgs "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('mockito-core') }}"

}
test.finalizedBy(jgivenTestReport)
pmd {
    toolVersion = "7.13.0"
    ruleSetFiles = files("config/pmd/custom-ruleset.xml")
    ruleSets = []
}
tasks.withType(Pmd).configureEach {
    exclude '**/grpc/**'
    exclude '**/io/envoyproxy/pgv/validate/**'
}
tasks.check {
    dependsOn("pmdMain")
}
rewrite {
    activeRecipe("org.openrewrite.java.recipes.JavaRecipeBestPractices")
    activeRecipe("org.openrewrite.java.OrderImports")
    activeRecipe("com.github.j4c62.pms.booking.StaticImportRecipe")
}


tasks.named("rewriteRun") {
    dependsOn("compileJava")
}
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
}
tasks.register("upKafka", Exec) {
    group = "Docker"
    workingDir = project.rootDir
    environment("KAFKA_ADVERTISED_LISTENERS", "PLAINTEXT://localhost:9092")
    commandLine = ["docker", "compose", "-f", "${rootDir}/.docker/docker-compose.yml", "up", "-d", "kafka"]

}

tasks.register("downKafka", Exec) {
    group = "Docker"
    workingDir = project.rootDir
    commandLine = [
            "docker", "compose",
            "-f", "${project.rootDir}/.docker/docker-compose.yml",
            "down"
    ]
}




